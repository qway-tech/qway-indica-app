import { useState } from "react";
import { useNavigate } from "react-router-dom";

const AREAS = [
  "QA",
  "Desenvolvimento Front-end",
  "Desenvolvimento Back-end",
  "Full Stack",
  "Dados/Engenharia de Dados",
  "Ci√™ncia de Dados/IA",
  "DevOps/SRE",
  "Seguran√ßa da Informa√ß√£o",
  "UX/UI",
  "Produto/Gest√£o de Produto",
  "Infra/Cloud",
  "Suporte/Service Desk",
  "Agile/PMO",
  "Outro",
];

const AREAS_EMPRESA = [
  "Consultoria",
  "Educa√ß√£o",
  "Desenvolvimento de Software",
  "Recursos Humanos e Recrutamento",
  "Plataformas/Produtos Digitais",
  "Eventos e Comunidades",
  "Outro",
];

const TIPOS_INDICACAO = [
  "Profissional",
  "Empresa",
  "Educa√ß√£o",
  "Conte√∫do",
  "Comunidade",
];

export default function IndicarPage() {
  // Estilo claro (for√ßa fundo branco e fonte escura em todos os campos, inclusive autofill)
  const field =
    "w-full rounded-md border px-3 py-2 bg-white text-black placeholder-slate-500 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 selection:bg-blue-200 selection:text-black autofill:shadow-[inset_0_0_0px_1000px_white] autofill:text-black [&:-webkit-autofill]:bg-white [&:-webkit-autofill]:text-black [&:-webkit-autofill]:shadow-[inset_0_0_0px_1000px_white] [&:-webkit-autofill]:caret-black";
  const navigate = useNavigate();
  const [form, setForm] = useState<{
    natureza: string;
    titulo: string;
    nome: string;
    empresaOuResponsavel: string;
    area: string;
    areaOutra: string;
    tipo: string;
    tipoOutro: string;
    valor: string;
    descricao: string;
    aspectosNegativos: string[];
    tipoIndicacao: string;
    especialidade: string;
    link: string; // <-- novo campo
  }>({
    natureza: "positiva",
    titulo: "",
    nome: "",
    empresaOuResponsavel: "",
    area: "",
    areaOutra: "",
    tipo: "",
    tipoOutro: "",
    valor: "",
    descricao: "",
    aspectosNegativos: [],
    tipoIndicacao: "",
    especialidade: "",
    link: "", // <-- novo campo
  });
  const [tentouEnviar, setTentouEnviar] = useState(false);

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setTentouEnviar(true);

    // Valida√ß√£o de campos obrigat√≥rios
    const camposObrigatorios = ["titulo", "nome", "empresaOuResponsavel", "descricao"];
    const faltando = camposObrigatorios.filter((campo) => !form[campo as keyof typeof form]);
    if (faltando.length > 0) {
      alert("Por favor, preencha todos os campos obrigat√≥rios.");
      return;
    }

    const payload = {
      ...form,
      area:
        form.area === "Outro"
          ? form.areaOutra?.trim() || "Outro"
          : form.area,
      tipo:
        form.tipo === "outro"
          ? form.tipoOutro?.trim() || "outro"
          : form.tipo,
    };

    const folder = form.natureza === "positiva" ? "positivas" : "negativas";
    const prefix = form.natureza === "positiva" ? "pos" : "neg";

    // Buscar o maior n√∫mero atual dispon√≠vel
    let nextId = 1;
    const githubPath = `https://api.github.com/repos/qway-tech/qway-referencias/contents/referencias/${folder}`;
    try {
      const response = await fetch(githubPath);
      const files = await response.json();
      const ids = files
        .map((f: any) => parseInt(f.name.replace(`${prefix}-`, "").replace(".json", "")))
        .filter((n: number) => !isNaN(n));
      nextId = Math.max(...ids, 0) + 1;
    } catch (err) {
      console.warn("N√£o foi poss√≠vel acessar os arquivos via GitHub API:", err);
    }

    const paddedId = String(nextId).padStart(4, "0");
    const filename = `${prefix}-${paddedId}.json`;
    const fullPayload = {
      ...payload,
      id: filename.replace(".json", ""),
      data: new Date().toISOString(),
      status: "pendente",
      link: form.link, // <-- inclu√≠do no payload
    };

    // Salvar refer√™ncia via API
    try {
      const response = await fetch("/api/registrar-referencia", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          natureza: form.natureza,
          conteudo: {
            ...payload,
            id: filename.replace(".json", ""),
            data: new Date().toISOString(),
            status: "pendente",
            link: form.link, // <-- inclu√≠do tamb√©m aqui
          },
          filename,
          folder,
        }),
      });

      if (!response.ok) {
        throw new Error("Erro ao registrar refer√™ncia");
      }

      // Armazena refer√™ncia localmente at√© ser encontrada via GET
      const referenciaTempKey = `ref-pending-${filename.replace(".json", "")}`;
      localStorage.setItem(referenciaTempKey, JSON.stringify(fullPayload));

      alert("Refer√™ncia registrada com sucesso!");
      navigate(`/referencias?id=${filename.replace(".json", "")}`);
    } catch (err) {
      console.error("Erro ao salvar no GitHub:", err);
      alert("Falha ao registrar a refer√™ncia.");
    }
  };

  return (
    <div className="p-6 max-w-3xl mx-auto mt-12">
      <button className="btn-back mb-6" onClick={() => navigate(-1)}>
        ‚Üê Voltar
      </button>
      <h1 className="text-3xl font-bold mb-6">üì¢ Registrar Refer√™ncia</h1>

      <div className="mb-4">
        <label className="block mb-1 font-medium">Natureza da refer√™ncia:</label>
        <div className="flex gap-6">
          <label>
            <input
              type="radio"
              name="natureza"
              value="positiva"
              checked={form.natureza === "positiva"}
              onChange={handleChange}
              className="mr-2"
            />
            Positiva
          </label>
          <label>
            <input
              type="radio"
              name="natureza"
              value="negativa"
              checked={form.natureza === "negativa"}
              onChange={handleChange}
              className="mr-2"
            />
            Negativa
          </label>
        </div>
      </div>

      <div className="mb-4">
        <label className="block mb-1 font-medium">
          Tipo de indica√ß√£o <span className="text-red-500">*</span>
        </label>
        <select
          name="tipoIndicacao"
          value={form.tipoIndicacao}
          onChange={handleChange}
          className={`${field} h-[42px] ${tentouEnviar && !form.tipoIndicacao ? 'border-red-500' : form.tipoIndicacao ? 'border-green-500' : ''}`}
          required
        >
          <option value="">Selecione...</option>
          {TIPOS_INDICACAO.map((tipo) => (
            <option key={tipo} value={tipo}>
              {tipo}
            </option>
          ))}
        </select>
        {tentouEnviar && !form.tipoIndicacao && (
          <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
        )}
      </div>

      <form onSubmit={handleSubmit} className="space-y-5" noValidate>
        {/* T√≠tulo/frase descritiva para cada tipo */}
        {form.tipoIndicacao && (
          <div>
            <label htmlFor="titulo" className="block mb-1 font-medium">
              {form.tipoIndicacao === "Profissional"
                ? <>Como voc√™ descreveria esse profissional em uma frase? <span className="text-red-500">*</span></>
                : form.tipoIndicacao === "Empresa"
                ? <>Como voc√™ descreveria essa empresa em uma frase? <span className="text-red-500">*</span></>
                : form.tipoIndicacao === "Conte√∫do"
                ? <>Como voc√™ descreveria essa fonte de conte√∫do em uma frase? <span className="text-red-500">*</span></>
                : form.tipoIndicacao === "Comunidade"
                ? <>Como voc√™ descreveria essa comunidade em uma frase? <span className="text-red-500">*</span></>
                : form.tipoIndicacao === "Educa√ß√£o"
                ? <>Como voc√™ descreveria esse curso/mentoria/etc em uma frase? <span className="text-red-500">*</span></>
                : <>T√≠tulo <span className="text-red-500">*</span></>}
            </label>
            <input
              id="titulo"
              type="text"
              name="titulo"
              value={form.titulo}
              onChange={handleChange}
              placeholder={
                form.tipoIndicacao === "Profissional"
                  ? "Ex.: Profissional √©tico, colaborativo e com √≥tima did√°tica"
                  : form.tipoIndicacao === "Empresa"
                  ? "Ex.: Empresa com forte cultura de aprendizado e respeito"
                  : form.tipoIndicacao === "Conte√∫do"
                  ? "Ex.: Canal com conte√∫dos pr√°ticos e atualizados sobre QA"
                  : form.tipoIndicacao === "Comunidade"
                  ? "Ex.: Comunidade colaborativa e com eventos frequentes"
                  : form.tipoIndicacao === "Educa√ß√£o"
                  ? "Ex.: Forma√ß√£o completa, com instrutores qualificados e abordagem pr√°tica"
                  : "T√≠tulo da refer√™ncia"
              }
              className={`${field} h-[42px] ${tentouEnviar && !form.titulo ? 'border-red-500' : form.titulo ? 'border-green-500' : ''}`}
              required
            />
            {tentouEnviar && !form.titulo && (
              <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
            )}
          </div>
        )}

        {form.tipoIndicacao === "Educa√ß√£o" && (
          <>
            <div>
              <label htmlFor="nome" className="block mb-1 font-medium">
                Nome do Curso/Forma√ß√£o <span className="text-red-500">*</span>
              </label>
              <input
                id="nome"
                type="text"
                name="nome"
                value={form.nome}
                onChange={handleChange}
                placeholder="Ex.: QA Profissional, Domine Cypress, etc."
                className={`${field} h-[42px] ${tentouEnviar && !form.nome ? 'border-red-500' : form.nome ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.nome && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            <div>
              <label htmlFor="empresaOuResponsavel" className="block mb-1 font-medium">
                Institui√ß√£o de Ensino ou Instrutor Respons√°vel <span className="text-red-500">*</span>
              </label>
              <input
                id="empresaOuResponsavel"
                type="text"
                name="empresaOuResponsavel"
                value={form.empresaOuResponsavel}
                onChange={handleChange}
                placeholder="Quem vende/oferece"
                className={`${field} h-[42px] ${tentouEnviar && !form.empresaOuResponsavel ? 'border-red-500' : form.empresaOuResponsavel ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.empresaOuResponsavel && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            {/* CAMPO: Link oficial (site, p√°gina de vendas, etc.) */}
            <div>
              <label htmlFor="valor" className="block mb-1 font-medium">
                Link oficial (site, p√°gina de vendas, etc.)
              </label>
              <input
                id="valor"
                type="url"
                name="valor"
                value={form.valor}
                onChange={handleChange}
                placeholder="https://exemplo.com/curso"
                className={`${field} ${form.valor ? 'border-green-500' : ''}`}
              />
            </div>

            {/* NOVO BLOCO DE CAMPOS: Tipo, √Årea, Especialidade, Valor */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="tipo" className="block mb-1 font-medium">
                  Tipo <span className="text-red-500">*</span>
                </label>
              <select
                id="tipo"
                name="tipo"
                value={form.tipo}
                onChange={handleChange}
                className={`${field} h-[42px] ${tentouEnviar && !form.tipo ? 'border-red-500' : form.tipo ? 'border-green-500' : ''}`}
                required
              >
                <option value="">Selecione...</option>
                <option value="curso">Curso</option>
                <option value="mentoria">Mentoria</option>
                <option value="ebook">E-book</option>
                <option value="certificacao">Certifica√ß√£o</option>
                <option value="workshop">Workshop</option>
                <option value="outro">Outro</option>
              </select>
              {tentouEnviar && !form.tipo && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
                {form.tipo === "outro" && (
                  <div className="mt-2">
                    <label htmlFor="tipoOutro" className="block mb-1 font-medium">
                      Qual outro tipo?
                    </label>
                    <input
                      id="tipoOutro"
                      type="text"
                      name="tipoOutro"
                      value={form.tipoOutro}
                      onChange={handleChange}
                      placeholder="Ex.: Imers√£o, Comunidade, etc."
                      className={`${field} h-[42px] ${form.tipoOutro ? 'border-green-500' : ''}`}
                      required
                    />
                  </div>
                )}
              </div>

              <div>
                <label htmlFor="area" className="block mb-1 font-medium">
                  √Årea <span className="text-red-500">*</span>
                </label>
                <select
                  id="area"
                  name="area"
                  value={form.area}
                  onChange={handleChange}
                  className={`${field} h-[42px] ${tentouEnviar && !form.area ? 'border-red-500' : form.area ? 'border-green-500' : ''}`}
                  required
                >
                  <option value="">Selecione...</option>
                  {AREAS.map((a) => (
                    <option key={a} value={a}>
                      {a}
                    </option>
                  ))}
                </select>
                {tentouEnviar && !form.area && (
                  <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
                )}
              </div>
            </div>

            {form.area === "Outro" && (
              <div className="mt-2">
                <label htmlFor="areaOutra" className="block mb-1 font-medium">
                  Qual √°rea?
                </label>
                <input
                  id="areaOutra"
                  type="text"
                  name="areaOutra"
                  value={form.areaOutra}
                  onChange={handleChange}
                  placeholder="Ex.: Marketing Tech, Educa√ß√£o, etc."
                  className={`${field} h-[42px] ${form.areaOutra ? 'border-green-500' : ''}`}
                  required
                />
              </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="especialidade" className="block mb-1 font-medium">
                  Especialidade
                </label>
                <input
                  id="especialidade"
                  type="text"
                  name="especialidade"
                  value={form.especialidade}
                  onChange={handleChange}
                  placeholder="Ex.: Mentoria com foco em iniciantes"
                  className={`${field} h-[42px] ${tentouEnviar && !form.especialidade ? 'border-red-500' : form.especialidade ? 'border-green-500' : ''}`}
                />
              </div>
              <div>
                <label htmlFor="valor" className="block mb-1 font-medium">
                  Valor pago (R$)
                </label>
              <input
                id="valor"
                type="number"
                name="valor"
                value={form.valor}
                onChange={handleChange}
                placeholder="Opcional"
                min="0"
                step="0.01"
                className={`${field} ${form.valor ? 'border-green-500' : ''}`}
              />
              </div>
            </div>
            {/* FIM DO NOVO BLOCO */}
          </>
        )}

        {form.tipoIndicacao === "Profissional" && (
          <>
            {/* Frase descritiva j√° est√° no campo titulo acima */}
            <div>
              <label htmlFor="nome" className="block mb-1 font-medium">
                Nome completo do profissional <span className="text-red-500">*</span>
              </label>
              <input
                id="nome"
                type="text"
                name="nome"
                value={form.nome}
                onChange={handleChange}
                placeholder="Ex.: Maria Silva"
                className={`${field} h-[42px] ${tentouEnviar && !form.nome ? 'border-red-500' : form.nome ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.nome && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            <div>
              <label htmlFor="empresaOuResponsavel" className="block mb-1 font-medium">
                Onde atua (empresa, comunidade, etc.) <span className="text-red-500">*</span>
              </label>
              <input
                id="empresaOuResponsavel"
                type="text"
                name="empresaOuResponsavel"
                value={form.empresaOuResponsavel}
                onChange={handleChange}
                placeholder="Ex.: XPTO Tecnologia, Comunidade QA Brasil, Freelancer"
                className={`${field} h-[42px] ${tentouEnviar && !form.empresaOuResponsavel ? 'border-red-500' : form.empresaOuResponsavel ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.empresaOuResponsavel && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="area" className="block mb-1 font-medium">
                  √Årea de Atua√ß√£o
                </label>
                <select
                  id="area"
                  name="area"
                  value={form.area}
                  onChange={handleChange}
                  className={`${field} h-[42px] ${tentouEnviar && !form.area ? 'border-red-500' : form.area ? 'border-green-500' : ''}`}
                  required
                >
                  <option value="">Selecione...</option>
                  {AREAS.map((a) => (
                    <option key={a} value={a}>
                      {a}
                    </option>
                  ))}
                </select>
                {tentouEnviar && !form.area && (
                  <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
                )}
              </div>
              {form.area === "Outro" && (
                <div>
                  <label htmlFor="areaOutra" className="block mb-1 font-medium">
                    Qual √°rea?
                  </label>
                  <input
                    id="areaOutra"
                    type="text"
                    name="areaOutra"
                    value={form.areaOutra}
                    onChange={handleChange}
                    placeholder="Ex.: RH/Tecnologia, Freelancer, etc."
                    className={`${field} h-[42px]`}
                  />
                </div>
              )}
              {/* Especialidade - campo novo ap√≥s √Årea */}
              <div>
                <label htmlFor="especialidade" className="block mb-1 font-medium">
                  Especialidade
                </label>
                <input
                  id="especialidade"
                  type="text"
                  name="especialidade"
                  value={form.especialidade || ""}
                  onChange={handleChange}
                  placeholder="Ex.: QA Funcional, Automa√ß√£o de Testes, Performance"
                  className={`${field} h-[42px] ${tentouEnviar && !form.especialidade ? 'border-red-500' : form.especialidade ? 'border-green-500' : ''}`}
                />
              </div>
            </div>
            {/* Campo de link do perfil (LinkedIn, GitHub, etc.) movido para c√° */}
            <div>
              <label htmlFor="link" className="block mb-1 font-medium">
                Link do perfil (LinkedIn, GitHub, etc.)
              </label>
              <input
                id="link"
                type="url"
                name="link"
                value={form.link}
                onChange={handleChange}
                placeholder="https://linkedin.com/in/exemplo"
                className={`${field} ${form.link ? 'border-green-500' : ''}`}
              />
            </div>
            <div>
              <label htmlFor="descricao" className="block mb-1 font-medium">
                Justificativa da indica√ß√£o <span className="text-red-500">*</span>
              </label>
              <textarea
                id="descricao"
                name="descricao"
                value={form.descricao}
                onChange={handleChange}
                placeholder="Fale sobre seu contato com esse profissional, qualidades, resultados ou contexto de atua√ß√£o"
                rows={6}
                className={`${field} ${tentouEnviar && !form.descricao ? 'border-red-500' : form.descricao ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.descricao && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            {form.natureza === "positiva" && (
              <div>
                <label className="block mb-1 font-medium">
                  Pontos fortes deste profissional
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Comunica√ß√£o clara",
                    "Conhecimento t√©cnico",
                    "Cumpre prazos",
                    "Respons√°vel e √©tico",
                    "Did√°tica ou clareza ao explicar",
                    "Proatividade",
                    "Empatia e escuta ativa",
                    "Trabalho em equipe",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}

            {/* Bloco - aspectos negativos para Profissional */}
            {form.natureza === "negativa" && form.tipoIndicacao === "Profissional" && (
              <div>
                <label className="block mb-1 font-medium">
                  O que voc√™ considera que foi negativo?
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Falta de pontualidade ou comprometimento",
                    "Problemas de comunica√ß√£o",
                    "Falta de conhecimento t√©cnico",
                    "Posturas anti√©ticas",
                    "Dificuldade de trabalho em equipe",
                    "Condutas inadequadas em p√∫blico ou redes sociais",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}
          </>
        )}

        {form.tipoIndicacao === "Empresa" && (
          <>
            <div>
              <label htmlFor="nome" className="block mb-1 font-medium">
                Nome da Empresa <span className="text-red-500">*</span>
              </label>
              <input
                id="nome"
                type="text"
                name="nome"
                value={form.nome}
                onChange={handleChange}
                placeholder="Ex.: Tech Solutions Ltda"
                className={`${field} h-[42px] ${tentouEnviar && !form.nome ? 'border-red-500' : form.nome ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.nome && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            {/* Bloco de √Årea de Atua√ß√£o, Qual √°rea?, Especialidade */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="area" className="block mb-1 font-medium">
                  √Årea de Atua√ß√£o
                </label>
                <select
                  id="area"
                  name="area"
                  value={form.area}
                  onChange={handleChange}
                  className={`${field} h-[42px] ${tentouEnviar && !form.area ? 'border-red-500' : form.area ? 'border-green-500' : ''}`}
                  required
                >
                  <option value="">Selecione...</option>
                  {AREAS_EMPRESA.map((a) => (
                    <option key={a} value={a}>
                      {a}
                    </option>
                  ))}
                </select>
                {tentouEnviar && !form.area && (
                  <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
                )}
              </div>
              {/* Qual √°rea? s√≥ aparece se √°rea == Outro */}
              {form.area === "Outro" ? (
                <div>
                  <label htmlFor="areaOutra" className="block mb-1 font-medium">
                    Qual √°rea?
                  </label>
                  <input
                    id="areaOutra"
                    type="text"
                    name="areaOutra"
                    value={form.areaOutra}
                    onChange={handleChange}
                    placeholder="Ex.: Marketing Tech, Educa√ß√£o, etc."
                    className={`${field} h-[42px]`}
                  />
                </div>
              ) : (
                <div>
                  <label htmlFor="especialidade" className="block mb-1 font-medium">
                    Especialidade ou segmento
                  </label>
                  <input
                    id="especialidade"
                    type="text"
                    name="especialidade"
                    value={form.especialidade || ""}
                    onChange={handleChange}
                    placeholder="Ex.: Consultoria √°gil, Desenvolvimento de plataformas educacionais"
                    className={`${field} h-[42px] ${tentouEnviar && !form.especialidade ? 'border-red-500' : form.especialidade ? 'border-green-500' : ''}`}
                  />
                </div>
              )}
            </div>
            {/* Se √°rea == Outro, mostra Especialidade/segmento abaixo */}
            {form.area === "Outro" && (
              <div className="mt-2">
                <label htmlFor="especialidade" className="block mb-1 font-medium">
                  Especialidade ou segmento
                </label>
                <input
                  id="especialidade"
                  type="text"
                  name="especialidade"
                  value={form.especialidade || ""}
                  onChange={handleChange}
                  placeholder="Ex.: Consultoria √°gil, Desenvolvimento de plataformas educacionais"
                  className={`${field} h-[42px] ${tentouEnviar && !form.especialidade ? 'border-red-500' : form.especialidade ? 'border-green-500' : ''}`}
                />
              </div>
            )}
            {/* Novo campo: Atua√ß√£o geogr√°fica */}
            <div className="mt-2">
              <label htmlFor="tipo" className="block mb-1 font-medium">
                Atua√ß√£o geogr√°fica <span className="text-red-500">*</span>
              </label>
              <select
                id="tipo"
                name="tipo"
                value={form.tipo}
                onChange={handleChange}
                className={`${field} h-[42px] ${tentouEnviar && !form.tipo ? 'border-red-500' : form.tipo ? 'border-green-500' : ''}`}
                required
              >
                <option value="">Selecione...</option>
                <option value="Nacional">Nacional</option>
                <option value="Internacional">Estrangeira</option>
                <option value="Ambos">Multinacional com atua√ß√£o no Brasil</option>
                <option value="Outro">Outro</option>
              </select>
              {tentouEnviar && !form.tipo && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            {/* Campo de link institucional */}
            <div className="mt-2">
              <label htmlFor="link" className="block mb-1 font-medium">
                Link institucional ou site da empresa
              </label>
              <input
                id="link"
                type="url"
                name="link"
                value={form.link}
                onChange={handleChange}
                placeholder="https://empresa.com.br"
                className={`${field} ${form.link ? 'border-green-500' : ''}`}
              />
            </div>
            <div>
              <label htmlFor="descricao" className="block mb-1 font-medium">
                Por que voc√™ est√° indicando esta empresa? <span className="text-red-500">*</span>
              </label>
              <textarea
                id="descricao"
                name="descricao"
                value={form.descricao}
                onChange={handleChange}
                placeholder="Fale sobre a experi√™ncia com a empresa, valores percebidos, ambiente ou resultados"
                rows={6}
                className={`${field} ${tentouEnviar && !form.descricao ? 'border-red-500' : form.descricao ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.descricao && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>

            {/* Bloco - aspectos negativos ou positivos para Empresa */}
            {form.natureza === "negativa" && form.tipoIndicacao === "Empresa" && (
              <div>
                <label className="block mb-1 font-medium">
                  O que voc√™ considera que foi negativo?
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Comunica√ß√£o dif√≠cil ou lenta",
                    "Falta de transpar√™ncia",
                    "Ambiente t√≥xico ou desorganizado",
                    "Desrespeito com profissionais ou clientes",
                    "Pr√°ticas anti√©ticas",
                    "Foco excessivo em vendas ou marketing",
                    "Promessas n√£o cumpridas",
                    "Falta de apoio ou suporte",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}
            {form.natureza === "positiva" && form.tipoIndicacao === "Empresa" && (
              <div>
                <label className="block mb-1 font-medium">
                  O que voc√™ considera que foi positivo?
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Comunica√ß√£o clara e eficiente",
                    "Transpar√™ncia nas rela√ß√µes",
                    "Cumprimento do que promete",
                    "Ambiente saud√°vel e colaborativo",
                    "Apoio e suporte ao cliente/profissional",
                    "Responsabilidade social e √©tica",
                    "Valoriza√ß√£o da qualidade e inova√ß√£o",
                    "Facilidade de contato e resolu√ß√£o de problemas",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}
          </>
        )}

        {form.tipoIndicacao === "Conte√∫do" && (
          <>
            <div>
              <label htmlFor="nome" className="block mb-1 font-medium">
                Nome do Canal, Perfil, Blog, Podcast, etc. <span className="text-red-500">*</span>
              </label>
              <input
                id="nome"
                type="text"
                name="nome"
                value={form.nome}
                onChange={handleChange}
                placeholder="Ex.: Testando com Qualidade"
                className={`${field} h-[42px] ${tentouEnviar && !form.nome ? 'border-red-500' : form.nome ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.nome && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            <div>
              <label htmlFor="empresaOuResponsavel" className="block mb-1 font-medium">
                Respons√°vel/Autor <span className="text-red-500">*</span>
              </label>
              <input
                id="empresaOuResponsavel"
                type="text"
                name="empresaOuResponsavel"
                value={form.empresaOuResponsavel}
                onChange={handleChange}
                placeholder="Quem cria ou mant√©m esse conte√∫do"
                className={`${field} h-[42px] ${tentouEnviar && !form.empresaOuResponsavel ? 'border-red-500' : form.empresaOuResponsavel ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.empresaOuResponsavel && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            {/* Bloco: Tipo + √Årea */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="tipo" className="block mb-1 font-medium">
                  Tipo <span className="text-red-500">*</span>
                </label>
                <input
                  id="tipo"
                  type="text"
                  name="tipo"
                  value={form.tipo}
                  onChange={handleChange}
                  placeholder="Ex.: Canal no YouTube, Podcast, Blog, etc."
                  className={`${field} h-[42px] ${tentouEnviar && !form.tipo ? 'border-red-500' : form.tipo ? 'border-green-500' : ''}`}
                  required
                />
                {tentouEnviar && !form.tipo && (
                  <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
                )}
              </div>
              <div>
                <label htmlFor="area" className="block mb-1 font-medium">
                  √Årea de Interesse
                </label>
                <select
                  id="area"
                  name="area"
                  value={form.area}
                  onChange={handleChange}
                  className={`${field} h-[42px] ${tentouEnviar && !form.area ? 'border-red-500' : form.area ? 'border-green-500' : ''}`}
                  required
                >
                  <option value="">Selecione...</option>
                  {AREAS.map((a) => (
                    <option key={a} value={a}>
                      {a}
                    </option>
                  ))}
                </select>
                {tentouEnviar && !form.area && (
                  <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
                )}
              </div>
            </div>
            {form.area === "Outro" && (
              <div>
                <label htmlFor="areaOutra" className="block mb-1 font-medium">
                  Qual √°rea?
                </label>
                <input
                  id="areaOutra"
                  type="text"
                  name="areaOutra"
                  value={form.areaOutra}
                  onChange={handleChange}
                  placeholder="Ex.: Marketing Tech, Educa√ß√£o, etc."
                  className={`${field} h-[42px]`}
                />
              </div>
            )}
            {/* Especialidade vis√≠vel apenas para tipoIndicacao === "Conte√∫do" */}
            <div>
              <label htmlFor="especialidade" className="block mb-1 font-medium">
                Formato ou Especialidade
              </label>
              <input
                id="especialidade"
                type="text"
                name="especialidade"
                value={form.especialidade || ""}
                onChange={handleChange}
                placeholder="Ex.: V√≠deos semanais com estudos de caso"
                className={`${field} h-[42px] ${tentouEnviar && !form.especialidade ? 'border-red-500' : form.especialidade ? 'border-green-500' : ''}`}
              />
            </div>
            {/* Adicionado campo de link do conte√∫do */}
            <div>
              <label htmlFor="valor" className="block mb-1 font-medium">
                Link do conte√∫do (YouTube, blog, podcast, etc.)
              </label>
              <input
                id="valor"
                type="url"
                name="valor"
                value={form.valor}
                onChange={handleChange}
                placeholder="https://youtube.com/@exemplo ou https://blog.exemplo.com"
                className={`${field} ${form.valor ? 'border-green-500' : ''}`}
              />
            </div>
            <div>
              <label htmlFor="descricao" className="block mb-1 font-medium">
                Por que voc√™ est√° indicando este conte√∫do? <span className="text-red-500">*</span>
              </label>
              <textarea
                id="descricao"
                name="descricao"
                value={form.descricao}
                onChange={handleChange}
                placeholder="Fale sobre a qualidade, relev√¢ncia e utilidade do conte√∫do"
                rows={6}
                className={`${field} ${tentouEnviar && !form.descricao ? 'border-red-500' : form.descricao ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.descricao && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            {/* Bloco de aspectos positivos para Conte√∫do */}
            {form.natureza === "positiva" && (
              <div>
                <label className="block mb-1 font-medium">
                  O que voc√™ considera que foi positivo?
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Conte√∫do claro e aplic√°vel",
                    "Instrutor com boa did√°tica",
                    "Material atualizado",
                    "Consist√™ncia nas publica√ß√µes",
                    "Engajamento com a comunidade",
                    "Formato acess√≠vel e atrativo",
                    "Relev√¢ncia dos temas abordados",
                    "Did√°tica e clareza na explica√ß√£o",
                    "Convidados relevantes (se for podcast/canal)",
                    "Fonte de aprendizado cont√≠nuo",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}
            {/* Bloco de aspectos negativos para Conte√∫do */}
            {form.natureza === "negativa" && form.tipoIndicacao === "Conte√∫do" && (
              <div>
                <label className="block mb-1 font-medium">
                  O que voc√™ considera que foi negativo?
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Conte√∫do desatualizado ou incorreto",
                    "Excesso de marketing ou autopromo√ß√£o",
                    "Frequ√™ncia de publica√ß√µes muito baixa",
                    "Falta de profundidade ou clareza",
                    "Pouco alinhamento com a realidade do mercado",
                    "Dificuldade de acesso ou navega√ß√£o",
                    "Falta de fontes confi√°veis ou refer√™ncias",
                    "Coment√°rios ou intera√ß√µes t√≥xicas",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}
          </>
        )}

        {form.tipoIndicacao === "Comunidade" && (
          <>
            <div>
              <label htmlFor="nome" className="block mb-1 font-medium">
                Nome da Comunidade <span className="text-red-500">*</span>
              </label>
              <input
                id="nome"
                type="text"
                name="nome"
                value={form.nome}
                onChange={handleChange}
                placeholder="Ex.: QA Brasil"
                className={`${field} h-[42px] ${tentouEnviar && !form.nome ? 'border-red-500' : form.nome ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.nome && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            <div>
              <label htmlFor="empresaOuResponsavel" className="block mb-1 font-medium">
                Respons√°vel/Coordenador <span className="text-red-500">*</span>
              </label>
              <input
                id="empresaOuResponsavel"
                type="text"
                name="empresaOuResponsavel"
                value={form.empresaOuResponsavel}
                onChange={handleChange}
                placeholder="Quem lidera ou representa essa comunidade"
                className={`${field} h-[42px] ${tentouEnviar && !form.empresaOuResponsavel ? 'border-red-500' : form.empresaOuResponsavel ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.empresaOuResponsavel && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="tipo" className="block mb-1 font-medium">
                  Tipo <span className="text-red-500">*</span>
                </label>
                <input
                  id="tipo"
                  type="text"
                  name="tipo"
                  value={form.tipo}
                  onChange={handleChange}
                  placeholder="Ex.: Meetup, F√≥rum, Comunidade no Discord, etc."
                  className={`${field} h-[42px] ${tentouEnviar && !form.tipo ? 'border-red-500' : form.tipo ? 'border-green-500' : ''}`}
                  required
                />
                {tentouEnviar && !form.tipo && (
                  <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
                )}
              </div>
              <div>
                <label htmlFor="area" className="block mb-1 font-medium">
                  √Årea de Atua√ß√£o
                </label>
                <select
                  id="area"
                  name="area"
                  value={form.area}
                  onChange={handleChange}
                  className={`${field} h-[42px] ${tentouEnviar && !form.area ? 'border-red-500' : form.area ? 'border-green-500' : ''}`}
                  required
                >
                  <option value="">Selecione...</option>
                  {AREAS.map((a) => (
                    <option key={a} value={a}>
                      {a}
                    </option>
                  ))}
                </select>
                {tentouEnviar && !form.area && (
                  <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
                )}
              </div>
            </div>
            {form.area === "Outro" && (
              <div>
                <label htmlFor="areaOutra" className="block mb-1 font-medium">
                  Qual √°rea?
                </label>
                <input
                  id="areaOutra"
                  type="text"
                  name="areaOutra"
                  value={form.areaOutra}
                  onChange={handleChange}
                  placeholder="Ex.: Marketing Tech, Educa√ß√£o, etc."
                  className={`${field} h-[42px]`}
                />
              </div>
            )}
            <div>
              <label htmlFor="especialidade" className="block mb-1 font-medium">
                Especialidade
              </label>
              <input
                id="especialidade"
                type="text"
                name="especialidade"
                value={form.especialidade || ""}
                onChange={handleChange}
                placeholder="Ex.: Grupo no WhatsApp e encontros mensais"
                className={`${field} h-[42px] ${tentouEnviar && !form.especialidade ? 'border-red-500' : form.especialidade ? 'border-green-500' : ''}`}
              />
            </div>
            <div>
              <label htmlFor="link" className="block mb-1 font-medium">
                Link da comunidade
              </label>
              <input
                id="link"
                type="url"
                name="link"
                value={form.link}
                onChange={handleChange}
                placeholder="https://meetup.com/comunidade"
                className={`${field} ${form.link ? 'border-green-500' : ''}`}
              />
            </div>
            <div>
              <label htmlFor="descricao" className="block mb-1 font-medium">
                Por que voc√™ est√° indicando esta comunidade? <span className="text-red-500">*</span>
              </label>
              <textarea
                id="descricao"
                name="descricao"
                value={form.descricao}
                onChange={handleChange}
                placeholder="Fale sobre o ambiente, pessoas, eventos ou impacto gerado"
                rows={6}
                className={`${field} ${tentouEnviar && !form.descricao ? 'border-red-500' : form.descricao ? 'border-green-500' : ''}`}
                required
              />
              {tentouEnviar && !form.descricao && (
                <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
              )}
            </div>
            {/* NOVOS CAMPOS DE ASPECTOS POSITIVOS/NEGATIVOS PARA COMUNIDADE */}
            {form.natureza === "positiva" && (
              <div>
                <label className="block mb-1 font-medium">
                  O que voc√™ considera que foi positivo?
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Ambiente saud√°vel e colaborativo",
                    "Apoio e suporte ao profissional",
                    "Eventos regulares e bem organizados",
                    "Conte√∫do relevante compartilhado",
                    "Abertura para todos os n√≠veis de carreira",
                    "Participa√ß√£o ativa dos membros",
                    "Representatividade e inclus√£o",
                    "Valoriza√ß√£o da qualidade e inova√ß√£o",
                    "Networking e oportunidades de carreira",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}
            {form.natureza === "negativa" && (
              <div>
                <label className="block mb-1 font-medium">
                  O que voc√™ considera que foi negativo?
                </label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {[
                    "Falta de organiza√ß√£o nos encontros",
                    "Comunica√ß√£o ineficaz ou ausente",
                    "Ambiente hostil ou pouco acolhedor",
                    "Desinforma√ß√£o ou conte√∫do irrelevante",
                    "Exclus√£o de iniciantes ou novatos",
                    "Falta de diversidade e representatividade",
                    "Foco excessivo em autopromo√ß√£o",
                    "Dificuldade de engajamento",
                  ].map((item) => (
                    <label key={item} className="flex items-center">
                      <input
                        type="checkbox"
                        value={item}
                        checked={form.aspectosNegativos.includes(item)}
                        onChange={(e) => {
                          const checked = e.target.checked;
                          setForm((prev) => ({
                            ...prev,
                            aspectosNegativos: checked
                              ? [...prev.aspectosNegativos, item]
                              : prev.aspectosNegativos.filter((i) => i !== item),
                          }));
                        }}
                        className="mr-2"
                      />
                      {item}
                    </label>
                  ))}
                </div>
              </div>
            )}
          </>
        )}


        {/* O campo descricao foi movido para os blocos de Empresa, Conte√∫do e Comunidade com labels/placeholder espec√≠ficos */}

        {form.tipoIndicacao === "Educa√ß√£o" && (
          <div>
            <label htmlFor="descricao" className="block mb-1 font-medium">
              Por que voc√™ est√° indicando este curso/mentoria/etc? <span className="text-red-500">*</span>
            </label>
            <textarea
              id="descricao"
              name="descricao"
              value={form.descricao}
              onChange={handleChange}
              placeholder="Fale sobre a experi√™ncia, pontos positivos ou negativos, e como isso impactou voc√™"
              rows={6}
              className={`${field} ${tentouEnviar && !form.descricao ? 'border-red-500' : form.descricao ? 'border-green-500' : ''}`}
              required
            />
            {tentouEnviar && !form.descricao && (
              <p className="text-red-500 text-sm mt-1">Campo obrigat√≥rio</p>
            )}
          </div>
        )}

        {form.natureza === "negativa" && form.tipoIndicacao === "Educa√ß√£o" && (
          <div>
            <label className="block mb-1 font-medium">
              O que voc√™ considera que foi negativo?
            </label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
              {[
                "Falta de suporte",
                "Conte√∫do superficial ou gen√©rico",
                "Promessas n√£o cumpridas",
                "Cobran√ßa abusiva",
                "Press√£o para comprar outros produtos",
                "Foco excessivo em marketing",
                "Desorganiza√ß√£o da plataforma ou agenda",
                "Material desatualizado ou mal produzido",
                "Feedbacks gen√©ricos ou inexistentes",
                "N√£o cumprimento do que foi vendido",
              ].map((item) => (
                <label key={item} className="flex items-center">
                  <input
                    type="checkbox"
                    value={item}
                    checked={form.aspectosNegativos.includes(item)}
                    onChange={(e) => {
                      const checked = e.target.checked;
                      setForm((prev) => ({
                        ...prev,
                        aspectosNegativos: checked
                          ? [...prev.aspectosNegativos, item]
                          : prev.aspectosNegativos.filter((i) => i !== item),
                      }));
                    }}
                    className="mr-2"
                  />
                  {item}
                </label>
              ))}
            </div>
          </div>
        )}

        {form.natureza === "positiva" && form.tipoIndicacao === "Educa√ß√£o" && (
          <div>
            <label className="block mb-1 font-medium">
              O que voc√™ considera que foi positivo?
            </label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
              {[
                "Conte√∫do claro e aplic√°vel",
                "Instrutor com boa did√°tica",
                "Material complementar de qualidade",
                "Acesso f√°cil e organizado",
                "Suporte presente e eficiente",
                "Boa rela√ß√£o custo-benef√≠cio",
                "Cumprimento do que foi prometido",
                "Acompanhamento individual ou em grupo",
                "Feedbacks construtivos",
                "Experi√™ncia transformadora",
              ].map((item) => (
                <label key={item} className="flex items-center">
                  <input
                    type="checkbox"
                    value={item}
                    checked={form.aspectosNegativos.includes(item)}
                    onChange={(e) => {
                      const checked = e.target.checked;
                      setForm((prev) => ({
                        ...prev,
                        aspectosNegativos: checked
                          ? [...prev.aspectosNegativos, item]
                          : prev.aspectosNegativos.filter((i) => i !== item),
                      }));
                    }}
                    className="mr-2"
                  />
                  {item}
                </label>
              ))}
            </div>
          </div>
        )}

        <div className="pt-2">
          {/* Bot√£o de envio com acessibilidade e cursor not-allowed quando desabilitado */}
          {(() => {
            const disabled =
              !form.tipoIndicacao ||
              !form.titulo ||
              !form.nome ||
              !form.empresaOuResponsavel ||
              !form.descricao;
            const title = disabled
              ? "Preencha todos os campos obrigat√≥rios"
              : "Enviar refer√™ncia";
            if (disabled) {
              return (
                <div className="relative group inline-block">
                  <button
                    type="submit"
                    className={`btn-action opacity-50 cursor-not-allowed`}
                    disabled
                    style={{ cursor: "not-allowed" }}
                  >
                    Enviar refer√™ncia
                  </button>
                  <p className="absolute left-0 mt-2 text-sm text-red-600 whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                    ‚ö†Ô∏è Preencha todos os campos obrigat√≥rios para enviar a refer√™ncia.
                  </p>
                </div>
              );
            }
            return (
              <button
                type="submit"
                className="btn-action"
                title={title}
                aria-label={title}
              >
                Enviar refer√™ncia
              </button>
            );
          })()}
        </div>
      </form>
    </div>
  );
}